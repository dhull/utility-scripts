#! /usr/bin/perl

use strict;
use warnings;

use Getopt::Long;

my $reverse = 0;

GetOptions(
  'reverse!' => \$reverse,
) or die "bad option";

my $branch = $ARGV[0];

open(my $fh, '-|', 'git', 'log', '--decorate=short', $branch || ()) or die;

# The first line should contain the branch name
#   commit <HASH> (HEAD -> <BRANCH>
my $l = <$fh>;
if (! $branch) {
  if ($l =~ m/^commit\s+\S+\s+\(HEAD\s+\-\>\s+([^\s\,\)]+)/) { $branch = $1; }
}
print STDERR "branch: $branch\n";

use constant {
  BEFORE_COMMIT => 0,
  BEFORE_PARAGRAPH => 1,
  IN_PARAGRAPH => 2,
};

my @all_messages;
my $current_message = '';

my $state = BEFORE_COMMIT;
commit:
while (my $l = <$fh>) {
  if ($l =~ m/^\S/) {
    if ($state != BEFORE_COMMIT) {
      if ($state == IN_PARAGRAPH) {
        print "\n";
      }
      $state = BEFORE_COMMIT;
    }

    # Exit when we find a branch point, something like
    #   commit f2510f2aba9829e0e88957866cb49541115583dc (origin/master, origin/HEAD, master)
    # except if we've already pushed the branch it will be like
    #   commit 6ed5150033d9f1aedbc416a6f8726b48e71b7dc3 (origin/$branch)
    # and we want to ignore that.
    if ($l =~ m,^commit\s+\S+\s+\(([^\)]+)\),) {
      print STDERR "checking $1\n";
      my @branch = split(m/,\s*/, $1);
      foreach my $b (@branch) {
        if ($b eq "master" or ($b =~ m,^origin/, && $b ne "origin/$branch")) {
          last commit;
        }
      }
    }
    next;
  }

  # print "\n$state ";

  # Commit messages are indented by 4 spaces in git log output.
  if ($l =~ s/^    //) {
    if ($state == BEFORE_COMMIT) {
      if ($current_message) {
        push(@all_messages, $current_message);
        $current_message = '';
      }

      # We've found the start of a new commit message.  Everything else will
      # be indented four spaces so that it be indented under this bullet.
      $l = "* $l";
      $state = BEFORE_PARAGRAPH;
    } elsif ($l eq '') {
      # We've found a blank line; start a new paragraph.
      $l = $state eq IN_PARAGRAPH ? "\n\n" : "\n";
      $state = BEFORE_PARAGRAPH;
    } elsif ($l =~ m/^\>/) {
      # We've found some quoted text.
      # Don't include it in an unwrapped paragraph.
      $l = ($state == IN_PARAGRAPH ? "\n" : '') . "    $l";
      $state = BEFORE_PARAGRAPH;
    } elsif ($l =~ m/^\s/) {
      # We've found some indented text (i.e., code).
      # Don't include it in an unwrapped paragraph.
      $l = ($state == IN_PARAGRAPH ? "\n" : '') . "    $l";
      $state = BEFORE_PARAGRAPH;
    } elsif ($l =~ m/^(?:[\*\-]|\d+\.)\s+/) {
      # We've found a list.
      # Don't include it in an unwrapped paragraph.
      chomp($l);
      $l = ($state == IN_PARAGRAPH ? "\n" : '') . "    $l";
      $state = IN_PARAGRAPH;
    } else {
      # Otherwise join lines to unwrap paragraph unless the line begins with
      # whitespace.
      chomp($l);
      $l = ($state == IN_PARAGRAPH ? ' ' : '    ') . $l;
      $state = IN_PARAGRAPH;
    }

    $current_message .= $l;
  }
}

if ($current_message) {
  push(@all_messages, $current_message);
  $current_message = '';
}

# Ignore the exit value from close because git will complain because we close
# it without reading the entire git log.
close($fh);

map { s/\n*\z/\n/ } @all_messages;

if ($reverse) {
  @all_messages = reverse(@all_messages);
}

print join("\n", @all_messages);

exit(0);

