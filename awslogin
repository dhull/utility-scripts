#! /bin/bash

# See the "CONFIG VARIABLES" section below.
mode=config			# one of "environ" or "config"
#aws_profile=default		# default from $AWS_PROFILE
#arn=ARN			# default from "aws configure get arn --profile $aws_profile"
#onepassword_item="1P Item"	# default from "aws configure get onepassword_item --profile $aws_profile"
duration=$((36*3600))           # duration of session token in seconds (max is 36 hours = 129600 seconds)
: ${debug=0}

# This script helps integrate 1Password TOTPs (time-based one-time passwords)
# with AWS MFA authentication.  It has two modes: in "config" mode it edits
# your AWS credentials file with your temporary credentials, while in
# "environ" mode it outputs some commands to set the AWS credentials in your
# environment.  You must already be authenticated with the 1Password "op
# signin" command; if not, this script will exit with an error.
#
# To use this script you need to install awscli, jq, and 1password-cli.  The
# 1password-cli cask installs op, the 1Password command-line client.
#
#     brew install awscli jq
#     brew cask install 1password-cli
#
# Instructions on logging in to the 1Password client for the first time are at:
# https://support.1password.com/command-line-getting-started/
#
# Documentation for using the AWS client with MFA is at:
# https://aws.amazon.com/premiumsupport/knowledge-center/authenticate-mfa-cli/

# CONFIG VARIABLES
#
# arn
#    Find the ARN (Amazon Resource Name) for your account by logging in to the
#    aws console, going to
#    https://console.aws.amazon.com/iam/home?region=us-east-1#/security_credentials,
#    and look under "Assigned MFA device".  Instead of hardcoding a value in
#    this script, you can set a profile-specific value by running
#    `aws --profile AWS_PROFILE configure set arn MY_ARN`.  If you are using
#    this script's "config" mode, use the non-MFA profile.
#
# onepassword_item
#    The 1Password login item that contains the virtual MFA device to use for
#    AWS authentication.  Instead of hardcoding a value in this script, you
#    can set a profile-specific value by running
#    `aws --profile AWS_PROFILE configure set onepassword_item "My 1Password Item"`
#    If you are using this script's "config" mode, use the non-MFA profile.
#
# mode
#    In "config" mode this script will edit your $HOME/.aws/credentials file
#    to update it with the MFA credentials.  In "environ" mode this script
#    prints some environment variables that are intended to be sourced in your
#    shell.  Config mode is convenient because it allows you to run aws
#    commands from any shell.
#
# aws_profile
#    The profile to get the MFA session token for.
#
#    In "environ" mode, this profile will be used to get the MFA session token
#    and the `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, and
#    `AWS_SESSION_TOKEN` values will be printed to be evaled into your
#    environment.
#
#    In "config" mode, the "${aws_profile}-nomfa" profile (which you must
#    create before running the script) will be used to get the MFA session
#    token, and the $aws_profile section in your AWS credentials file will be
#    updated with the MFA credentials.
#
# duration
#    The number of seconds the session token will be valid.

# Need to unset these so that "aws sts" command will use credentials from
# ~/.aws/credentials file.
unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_SESSION_TOKEN

if test "$mode" = environ; then
    echo "# In environ mode this command is meant to be used with your shell's eval function."
    echo "# Run 'eval \$(awslogin)' to set the AWS credential environment variables in your shell."
fi

while [[ $# -gt 0 ]]; do
    case "$1" in
        -d|--debug)
            debug=1;
            shift;
            ;;
        -m=*|--mode=*)
            mode="${1#*=}"
            shift
            ;;
        -m|--mode)
            mode="$2"
            shift 2;
            ;;
        --)
            break
            ;;
        -*)
            echo "unknown option $1" 1>2
            exit 1
            ;;
        *)
            break
            ;;
    esac
done

if test $# -eq 1 -a -n "$1"; then
    aws_profile="$1"
elif test -n "$AWS_PROFILE"; then
    aws_profile="$AWS_PROFILE"
else
    echo "aws profile not specified and AWS_PROFILE is not set" 1>&2; exit 1
fi
test "$debug" = 1 && echo "aws_profile=$aws_profile" 1>&2

if test -z "$arn"; then
    arn="$(aws configure get arn --profile $aws_profile)" || { echo "arn is not set in $aws_profile" 1>&2; exit 1; }
fi
if test -z "$onepassword_item"; then
    onepassword_item="$(aws configure get onepassword_item --profile $aws_profile)" || { echo "onepassword_item is not set in $aws_profile" 1>&2; exit 1; }
fi

# Get the time-based one-time password.
case $(op --version) in
    1.*)
        totp=$(op get totp "$onepassword_item") ;;
    *)
        totp=$(op item get --otp "$onepassword_item") ;;
esac
test $? -eq 0 || exit 1

# Fetch the AWS session token.
cmd=(aws --profile "${aws_profile}-nomfa" sts get-session-token --duration-seconds "$duration" --serial-number "$arn" --token-code "$totp")
test "$debug" = 1 && echo "${cmd[@]}" 1>&2
"${cmd[@]}" | \
jq -r '.Credentials | "aws_access_key_id \(.AccessKeyId)\naws_secret_access_key \(.SecretAccessKey)\naws_session_token \(.SessionToken)"' | \
while read awskey awsval; do
    test "$debug" = 1 && echo "$awskey: $awsval" 1>&2
    case "$mode" in
        environ)
            echo "export $awskey='$awsval'"
            ;;
        config)
            aws --profile "$aws_profile" configure set "$awskey" "$awsval"
            ;;
    esac
done
